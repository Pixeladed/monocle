// Generated by CoffeeScript 1.8.0
(function() {
  var app, colorToHex, convertColor, debug, generate, inputControl, optionControl, palette;

  debug = function(caller, sentence) {
    return console.info(caller + ' :: ' + sentence);
  };

  app = angular.module('main', []);

  inputControl = app.controller('inputController', function() {
    this.value = '';
  });

  optionControl = app.controller('optionController', function() {
    return this.mode = 4;
  });

  colorToHex = function(rgb) {
    rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
    if (rgb && rgb.length === 4) {
      return "#" + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2);
    } else {
      return "";
    }
  };

  convertColor = function(value) {
    var processed;
    debug('converting', value);
    if (value.substr(0,1) == '#') {
      debug('colorMode', 'input = hex');
      console.dir(Please.HEX_to_HSV(value));
      return Please.HEX_to_HSV(value);
    } else if (value.substr(0,3) == 'rgb') {
      debug('colorMode', 'input = rgb or rgba');
      processed = colorToHex(value);
      console.log(processed);
      console.dir(Please.HEX_to_HSV(processed));
      return Please.HEX_to_HSV(processed);
    } else if (value.substr(0,3) == 'hsv') {
      debug('colorMode', 'input = hsv');
      return value;
    }
  };

  generate = function(base, mode) {
    debug('base', base);
    debug('mode', mode);
    if (mode !== 'none') {
      return Please.make_scheme(base, {
        'scheme_type': mode
      });
    } else {
      return Please.make_scheme(base, {});
    }
  };

  palette = function(base, inmode) {
    this.mode = inmode;
    this.scheme = generate(base, inmode);
  };

  $(document).ready(function() {
    var UI, colorSubmitted, getMode, hideview, inputVal, schemeContainer, showview;
    inputVal = '';
    schemeContainer = $('#schemeView ul.colors-display');
    UI = {
      makeColorHtml: function(name, bg, rgb, hsv, width) {
        return '<li class="scheme-color" style="width:' + width + '%"> <div class="card" style="background:' + bg + '"> <span class="color-name">' + name + '</span> <ul class="color-values"> <li class="value-hex"><strong>HEX: </strong>' + bg + '</li> <li class="value-rgb"><strong>RGB: </strong>' + rgb + '</li> <li class="hsv"><strong>HSV: </strong>' + hsv + '</li> </ul> </div> </li> ';
      },
      showScheme: function(scheme) {
        var color, hsv, hsvRAW, match, rgb, rgbRAW, width, _i, _len, _ref, _results;
        schemeContainer.html('');
        width = 100 / scheme.slice(0, 4).length;
        debug('misc', width);
        _ref = scheme.slice(0, 4);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          color = _ref[_i];
          match = ntc.name(color);
          console.log(match);
          rgbRAW = Please.HEX_to_RGB(color);
          hsvRAW = Please.HEX_to_HSV(color);
          rgb = 'rgb(' + rgbRAW.r + ',' + rgbRAW.g + ',' + rgbRAW.b + ')';
          hsv = 'hsv(' + hsvRAW.h.toString().substring(0, 3) + ',' + hsvRAW.s.toString().substring(0, 4) + ',' + hsvRAW.v.toString().substring(0, 4) + ')';
          _results.push(schemeContainer.append(UI.makeColorHtml(match[1], color, rgb, hsv, width)));
        }
        return _results;
      }
    };
    hideview = function(view) {
      debug('hideView', 'hided ' + view);
      $('#' + view + 'View').css({
        'margin-top': '30px',
        'opacity': '0',
        'z-index': '-1'
      });
    };
    showview = function(view) {
      debug('showView', 'shown ' + view);
      $('#' + view + 'View').css({
        'margin-top': '0',
        'opacity': '1',
        'z-index': '1'
      });
    };
    getMode = function() {
      var options, selectedOption, x, _i, _len;
      options = $('#options ul li');
      selectedOption = 'none';
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        x = options[_i];
        if ($(x).attr('class') === 'active') {
          selectedOption = x.innerHTML.toLowerCase();
        }
      }
      return selectedOption;
    };
    colorSubmitted = function() {
      var baseColor, generated, selectedMode;
      if (inputVal !== '?') {
        baseColor = convertColor(inputVal);
      } else {
        baseColor = convertColor(Please.make_color());
      }
      selectedMode = getMode();
      generated = new palette(baseColor, selectedMode);
      debug('.hidden.click', 'generated scheme: ' + generated.scheme);
      $("#modeTitle").get(0).innerHTML = selectedMode;
      hideview('input');
      showview('scheme');
      return generated.scheme;
    };
    $('#input-wrap input').keyup(function() {
      debug('input.keyup', "value entered: " + this.value);
      inputVal = this.value;
      return $(this).css('color', this.value);
    });
    $('.hidden').click(function() {
      UI.showScheme(colorSubmitted());
    });
    $("#back").click(function() {
      hideview("scheme");
      showview("input");
    });
  });

}).call(this);
